#! /bin/bash

panic()
{
	echo "FATAL ERROR: $@"
	exit 1
}

in_source_build=0

tmp_dir=/tmp/jasper
source_dir=$(pwd) || panic

if [ "$in_source_build" -ne 0 ]; then

	echo "In-source build"

	(cd "$source_dir" && \
	  cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$install_dir" \
	  -DALLOW_IN_SOURCE_BUILD=true .) || panic "cmake failed"

	(cd "$source_dir" && make clean && make all) || \
	  panic "make clean/all failed"

	(cd "$source_dir" && make install) || panic "make install failed"

	(cd "$source_dir" && CTEST_OUTPUT_ON_FAILURE=TRUE make test ARGS="-V") || \
	  panic "make test failed"

else

	case "$CC" in
	*gcc*)
		C_COMPILER=gcc;;
	*clang*)
		C_COMPILER=clang;;
	*)
		C_COMPILER=unknown;;
	esac

	echo "Compiler: $C_COMPILER"

	build_dir=/tmp/jasper/build

	echo "Out-of-source build"

	for lib_type in static shared; do

		install_dir="$tmp_dir/$lib_type/install"
		test_dir="$tmp_dir/$lib_type/test"
		if [ "$lib_type" = shared ]; then
			enable_shared=true
		else
			enable_shared=false
		fi

		echo "############################################################"
		echo "############################################################"
		echo "Library type: $lib_type"

		if [ "$TRAVIS_OS_NAME" = "osx" -a "$C_COMPILER" = "clang" ]; then
			build_tool="xcode"
		else
			build_tool="make"
		fi

		case "$build_tool" in
		make)
			build_targets=(clean all install)
			cmake_generator="Unix Makefiles"
			build_opts=("VERBOSE=1")
			;;
		xcode)
			build_targets=(install)
			cmake_generator="Xcode"
			build_opts=()
			;;
		*)
		esac

		echo "########################################"
		echo "cmake"
		echo "build tool: $build_tool"
		echo "########################################"

		cmake_opts=()
		cmake_opts+=(-G "$cmake_generator")
		(cd "$source_dir" && \
		  cmake "${cmake_opts[@]}" \
		  -DCMAKE_INSTALL_PREFIX="$install_dir" \
		  -DJAS_ENABLE_SHARED=$enable_shared \
		  -H. -B"$build_dir" \
		  "$@" \
		  ) || panic "cmake failed"

		echo "########################################"
		echo "build"
		echo "########################################"

		for target in "${build_targets[@]}"; do
			echo "########################################"
			echo "make $target"
			echo "########################################"
			(cmake --build "$build_dir" --target "$target" -- \
			  "${build_opts[@]}") || \
			  panic "build of $target failed"
		done

#		if [ 0 -ne 0 ]; then
#			for target in clean all install; do
#				echo "########################################"
#				echo "make $target"
#				echo "########################################"
#				(cd "$build_dir" && make "$target" VERBOSE=1) || \
#				  panic "make $target failed"
#			done
#		fi

		(cd "$install_dir" && ls -alR) || \
		  panic "cannot list directory $install_dir"

		echo "########################################"
		echo "external test"
		echo "########################################"

		mkdir -p "$test_dir" || panic "cannot make directory $test_dir"
		for file in build/travis/CMakeLists.txt src/appl/jasper.c; do
			cp "$source_dir/$file" "$test_dir" || \
			  panic "cannot copy $file"
		done
		cmake -H"$test_dir" -B"$test_dir" \
		  -DJASPER_LIBRARIES="-L$install_dir/lib -ljasper" \
		  -DJASPER_INCLUDE_DIR="$install_dir/include" \
		  || panic "cmake failed"
		(cd "$test_dir" && make clean && make all VERBOSE=1) || \
		  panic "make failed"

		if [ "$lib_type" = shared ]; then
			echo "########################################"
			echo "test"
			echo "########################################"

			if [ 1 -ne 0 ]; then
				CTEST_OUTPUT_ON_FAILURE=TRUE \
				  (cd "$build_dir" && ctest) || \
				  panic "ctest failed"
			fi

#			if [ 1 -ne 0 ]; then
#				(cd "$build_dir" && \
#				  CTEST_OUTPUT_ON_FAILURE=TRUE make test ARGS="-V") || \
#				  panic "make test failed"
#			fi
		fi

	done

fi
