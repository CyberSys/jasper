#! /bin/bash

panic()
{
	echo "FATAL ERROR: $@"
	exit 1
}

in_source_build=0

tmp_dir=/tmp/jasper
source_dir=$(pwd) || panic

if [ "$in_source_build" -ne 0 ]; then

	echo "In-source build"

	(cd "$source_dir" && \
	  cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$install_dir" \
	  -DALLOW_IN_SOURCE_BUILD=true .) || panic "cmake failed"

	(cd "$source_dir" && make clean && make all) || \
	  panic "make clean/all failed"

	(cd "$source_dir" && make install) || panic "make install failed"

	(cd "$source_dir" && CTEST_OUTPUT_ON_FAILURE=TRUE make test ARGS="-V") || \
	  panic "make test failed"

else

	build_dir=/tmp/jasper/build

	echo "Out-of-source build"

	for lib_type in static shared; do

		install_dir="$tmp_dir/$lib_type/install"
		test_dir="$tmp_dir/$lib_type/test"
		if [ "$lib_type" = shared ]; then
			enable_shared=true
		else
			enable_shared=false
		fi

		echo "############################################################"
		echo "############################################################"
		echo "Library type: $lib_type"

		echo "########################################"
		echo "cmake"
		echo "########################################"

		build_targets=(clean all install)
		if [ "$TRAVIS_OS_NAME" = "osx" ]; then
			build_targets=(install)
		fi
		cmake_opts=()
		if [ "$TRAVIS_OS_NAME" = "osx" ]; then
			cmake_opts+=(-G Xcode)
		fi
		#cmake_opts+=(-G "Unix Makefiles")
		(cd "$source_dir" && \
		  cmake "${cmake_opts[@]}" \
		  -DCMAKE_INSTALL_PREFIX="$install_dir" \
		  -DJAS_ENABLE_SHARED=$enable_shared \
		  -H. -B"$build_dir" \
		  "$@" \
		  ) || panic "cmake failed"

		echo "########################################"
		echo "build"
		echo "########################################"

		if [ 1 -ne 0 ]; then
			for target in "${build_targets[@]}"; do
				echo "########################################"
				echo "make $target"
				echo "########################################"
				(cmake --build "$build_dir" --target "$target") || \
				  panic "build of $target failed"
			done
		fi

		if [ 0 -ne 0 ]; then
			for target in clean all install; do
				echo "########################################"
				echo "make $target"
				echo "########################################"
				(cd "$build_dir" && make "$target" VERBOSE=1) || \
				  panic "make $target failed"
			done
		fi

		(cd "$install_dir" && ls -alR) || \
		  panic "cannot list directory $install_dir"

		echo "########################################"
		echo "external test"
		echo "########################################"

		mkdir -p "$test_dir" || panic "cannot make directory $test_dir"
		for file in build/travis/CMakeLists.txt src/appl/jasper.c; do
			cp "$source_dir/$file" "$test_dir" || \
			  panic "cannot copy $file"
		done
		cmake -H"$test_dir" -B"$test_dir" \
		  -DJASPER_LIBRARIES="-L$install_dir/lib -ljasper" \
		  -DJASPER_INCLUDE_DIR="$install_dir/include" \
		  || panic "cmake failed"
		(cd "$test_dir" && make clean && make all VERBOSE=1) || \
		  panic "make failed"

		if [ "$lib_type" = shared ]; then
			echo "########################################"
			echo "test"
			echo "########################################"

			if [ 1 -ne 0 ]; then
				CTEST_OUTPUT_ON_FAILURE=TRUE \
				  cmake --build "$build_dir" --target test || \
				  panic "build of test failed"
			fi

			if [ 0 -ne 0 ]; then
				(cd "$build_dir" && \
				  CTEST_OUTPUT_ON_FAILURE=TRUE make test ARGS="-V") || \
				  panic "make test failed"
			fi
		fi

	done

fi
